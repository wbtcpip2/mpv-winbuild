From 0e8ac67d60a76e8cc084608577189dc70119f0bb Mon Sep 17 00:00:00 2001
From: zhongfly <11155705+zhongfly@users.noreply.github.com>
Date: Wed, 6 Aug 2025 18:58:33 +0800
Subject: [PATCH] libdovi: remove libdovi

libdovi is no longer needed. RPU parsing is fully implemented in ffmpeg. libdovi is only used when ffmpeg is not new enough.
ref: https://github.com/mpv-player/mpv/pull/16631#issuecomment-3158504092
---
 .github/workflows/llvm_clang.yml | 16 +++++++---------
 .github/workflows/mpv_clang.yml  |  4 ++--
 .github/workflows/mpv_gcc.yml    |  5 +++--
 README.md                        |  5 -----
 packages/CMakeLists.txt          |  1 -
 packages/libdovi.cmake           | 27 ---------------------------
 packages/libplacebo.cmake        |  1 -
 7 files changed, 12 insertions(+), 47 deletions(-)
 delete mode 100644 packages/libdovi.cmake

diff --git a/.github/workflows/llvm_clang.yml b/.github/workflows/llvm_clang.yml
index dcbe1e6..7b9ba9e 100644
--- a/.github/workflows/llvm_clang.yml
+++ b/.github/workflows/llvm_clang.yml
@@ -90,39 +90,37 @@ jobs:
       - name: Building LLVM with IR Profile Instrumentation
         if: ${{ steps.clang_root_cache.outputs.cache-matched-key == '' }}
         run: |
-          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_x86_64/x86_64-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/clang_root/install_rustup -G Ninja -B build_x86_64 -S $PWD
+          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_x86_64/x86_64-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -G Ninja -B build_x86_64 -S $PWD
           ninja -C build_x86_64 llvm
-          ninja -C build_x86_64 rustup
-          ninja -C build_x86_64 cargo-clean
 
       - name: Building x86_64 toolchain
         if: ${{ steps.x86_64_cache.outputs.cache-matched-key == '' }}
         run: |
-          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_x86_64/x86_64-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/clang_root/install_rustup -G Ninja -B build_x86_64 -S $PWD
+          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_x86_64/x86_64-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -G Ninja -B build_x86_64 -S $PWD
           ninja -C build_x86_64 llvm-clang
 
       - name: Building x86_64-v3 toolchain
         if: ${{ steps.x86_64_v3_cache.outputs.cache-matched-key == '' }}
         run: |
-          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCOMPILER_TOOLCHAIN=clang -DGCC_ARCH=x86-64-v3 -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_x86_64_v3/x86_64_v3-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/clang_root/install_rustup -G Ninja -B build_x86_64_v3 -S $PWD
+          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCOMPILER_TOOLCHAIN=clang -DGCC_ARCH=x86-64-v3 -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_x86_64_v3/x86_64_v3-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -G Ninja -B build_x86_64_v3 -S $PWD
           ninja -C build_x86_64_v3 llvm-clang
 
       - name: Building i686 toolchain
         if: ${{ steps.i686_cache.outputs.cache-matched-key == '' }}
         run: |
-          cmake -DTARGET_ARCH=i686-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_i686/i686-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/clang_root/install_rustup -G Ninja -B build_i686 -S $PWD
+          cmake -DTARGET_ARCH=i686-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_i686/i686-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -G Ninja -B build_i686 -S $PWD
           ninja -C build_i686 llvm-clang
 
       - name: Building aarch64 toolchain
         if: ${{ steps.aarch64_cache.outputs.cache-matched-key == '' }}
         run: |
-          cmake -DTARGET_ARCH=aarch64-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_aarch64/aarch64-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/clang_root/install_rustup -G Ninja -B build_aarch64 -S $PWD
+          cmake -DTARGET_ARCH=aarch64-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_aarch64/aarch64-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -G Ninja -B build_aarch64 -S $PWD
           ninja -C build_aarch64 llvm-clang
 
       - name: PGO training with shaderc
         if: ${{ steps.clang_root_cache.outputs.cache-matched-key == '' }}
         run: |
-          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCLANG_PACKAGES_LTO=ON -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_x86_64/x86_64-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/clang_root/install_rustup -G Ninja -B build_x86_64 -S $PWD
+          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DLLVM_ENABLE_PGO=GEN -DCLANG_PACKAGES_LTO=ON -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_x86_64/x86_64-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -G Ninja -B build_x86_64 -S $PWD
           ninja -C build_x86_64 shaderc
 
       - name: Merging profraw to profdata
@@ -134,7 +132,7 @@ jobs:
       - name: Building LLVM with PGO
         if: ${{ steps.clang_root_cache.outputs.cache-matched-key == '' }}
         run: |
-          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DLLVM_ENABLE_PGO=USE -DLLVM_PROFDATA_FILE="llvm.profdata" -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_x86_64/x86_64-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/clang_root/install_rustup -G Ninja -B build_x86_64 -S $PWD
+          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DLLVM_ENABLE_PGO=USE -DLLVM_PROFDATA_FILE="llvm.profdata" -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_x86_64/x86_64-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -G Ninja -B build_x86_64 -S $PWD
           ninja -C build_x86_64 llvm
 
       - name: Cleanup
diff --git a/.github/workflows/mpv_clang.yml b/.github/workflows/mpv_clang.yml
index 1896989..26dd8a5 100644
--- a/.github/workflows/mpv_clang.yml
+++ b/.github/workflows/mpv_clang.yml
@@ -102,7 +102,7 @@ jobs:
 
       - name: Configuring CMake & Downloading source
         run: |
-          cmake -DTARGET_ARCH=${{ env.arch }}-w64-mingw32 -DCOMPILER_TOOLCHAIN=clang ${{ env.x86_64_v3_ARCH }} -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_$BIT/$BIT-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/clang_root/install_rustup -DENABLE_CCACHE=ON -DCLANG_PACKAGES_LTO=ON -G Ninja --fresh -B build_$BIT -S $PWD
+          cmake -DTARGET_ARCH=${{ env.arch }}-w64-mingw32 -DCOMPILER_TOOLCHAIN=clang ${{ env.x86_64_v3_ARCH }} -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_$BIT/$BIT-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DENABLE_CCACHE=ON -DCLANG_PACKAGES_LTO=ON -G Ninja --fresh -B build_$BIT -S $PWD
           ninja -C build_$BIT download || true
 
       - name: Building mpv
@@ -158,7 +158,7 @@ jobs:
           rm -rf release_$BIT/mpv-debug*.7z
 
       - name: Cleaning rust toolchain directory
-        if: always()
+        if: ${{ false }}
         run: |
           ninja -C build_$BIT cargo-clean
 
diff --git a/.github/workflows/mpv_gcc.yml b/.github/workflows/mpv_gcc.yml
index 6c4bed9..9549905 100644
--- a/.github/workflows/mpv_gcc.yml
+++ b/.github/workflows/mpv_gcc.yml
@@ -84,6 +84,7 @@ jobs:
 
       - name: Loading rustup cache
         uses: actions/cache/restore@main
+        if: ${{ false }}
         with:
           path: |
             clang_root
@@ -98,7 +99,7 @@ jobs:
 
       - name: Downloading source
         run: |
-          cmake -DTARGET_ARCH=${{ env.arch }}-w64-mingw32 ${{ env.gcc_arch }} -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/clang_root/install_rustup -DENABLE_CCACHE=ON --fresh -G Ninja -B build_$BIT -S $PWD
+          cmake -DTARGET_ARCH=${{ env.arch }}-w64-mingw32 ${{ env.gcc_arch }} -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DENABLE_CCACHE=ON --fresh -G Ninja -B build_$BIT -S $PWD
           ninja -C build_$BIT download || true
 
       - name: Building toolchain
@@ -151,7 +152,7 @@ jobs:
           rm -rf build_$BIT/mpv*
 
       - name: Cleaning rust toolchain directory
-        if: always()
+        if: ${{ false }}
         run: |
           ninja -C build_$BIT cargo-clean
 
diff --git a/README.md b/README.md
index db2699a..53cbc80 100644
--- a/README.md
+++ b/README.md
@@ -70,7 +70,6 @@ Example:
     cmake -DTARGET_ARCH=x86_64-w64-mingw32 \
     -DGCC_ARCH=x86-64-v3 \
     -DSINGLE_SOURCE_LOCATION="/home/user/packages" \
-    -DRUSTUP_LOCATION="/home/user/install_rustup" \
     -G Ninja -B build64 -S mpv-winbuild-cmake
 
 This cmake command will create `build64` folder for `x86_64-w64-mingw32`. Set `-DTARGET_ARCH=i686-w64-mingw32` for compiling 32-bit.
@@ -108,7 +107,6 @@ Example:
     -DCOMPILER_TOOLCHAIN=clang \
     -DGCC_ARCH=x86-64-v3 \
     -DSINGLE_SOURCE_LOCATION="/home/user/packages" \
-    -DRUSTUP_LOCATION="/home/user/install_rustup" \
     -DMINGW_INSTALL_PREFIX="/home/user/build_x86_64_v3/x86_64_v3-w64-mingw32" \
     -G Ninja -B build_x86_64_v3 -S mpv-winbuild-cmake
 
@@ -116,7 +114,6 @@ The cmake command will create `clang_root` as clang sysroot where llvm tools ins
 
     cd build_x86_64
     ninja llvm       # build LLVM (take around ~2 hours)
-    ninja rustup     # build rust toolchain
     ninja llvm-clang # build clang on specified target
     ninja mpv        # build mpv and all its dependencies
 
@@ -126,7 +123,6 @@ If you want add another target (ex. `i686-w64-mingw32`), change `TARGET_ARCH` an
     -DCMAKE_INSTALL_PREFIX="/home/user/clang_root" \
     -DCOMPILER_TOOLCHAIN=clang \
     -DSINGLE_SOURCE_LOCATION="/home/user/packages" \
-    -DRUSTUP_LOCATION="/home/user/install_rustup" \
     -DMINGW_INSTALL_PREFIX="/home/user/build_i686/i686-w64-mingw32" \
     -G Ninja -B build_i686 -S mpv-winbuild-cmake
     cd build_i686
@@ -216,7 +212,6 @@ to update flags which will pass on gcc, g++ and etc.
     - uavs3d
     - davs2
     - libsixel
-    - libdovi
     - libva
     - libzvbi
     - svtav1
diff --git a/packages/CMakeLists.txt b/packages/CMakeLists.txt
index d910060..6d297f3 100644
--- a/packages/CMakeLists.txt
+++ b/packages/CMakeLists.txt
@@ -79,7 +79,6 @@ list(APPEND ep
     shaderc
     glad
     fast_float
-    libdovi
     svtav1
     libplacebo
     libva
diff --git a/packages/libdovi.cmake b/packages/libdovi.cmake
deleted file mode 100644
index 0b275c8..0000000
--- a/packages/libdovi.cmake
+++ /dev/null
@@ -1,27 +0,0 @@
-ExternalProject_Add(libdovi
-    GIT_REPOSITORY https://github.com/quietvoid/dovi_tool.git
-    SOURCE_DIR ${SOURCE_LOCATION}
-    GIT_CLONE_FLAGS "--sparse --filter=tree:0"
-    GIT_CLONE_POST_COMMAND "sparse-checkout set --no-cone dolby_vision"
-    GIT_REMOTE_NAME origin
-    GIT_TAG main
-    UPDATE_COMMAND ""
-    PATCH_COMMAND ""
-    CONFIGURE_COMMAND ""
-    BUILD_COMMAND ${EXEC}
-        LD_PRELOAD=
-        CARGO_BUILD_TARGET_DIR=<BINARY_DIR>
-        CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1
-        ${cargo_lto_rustflags}
-        cargo cinstall
-        --manifest-path <SOURCE_DIR>/dolby_vision/Cargo.toml
-        --prefix ${MINGW_INSTALL_PREFIX}
-        --target ${TARGET_CPU}-pc-windows-${rust_target}
-        --release
-        --library-type staticlib
-    INSTALL_COMMAND ""
-    LOG_DOWNLOAD 1 LOG_UPDATE 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1
-)
-
-force_rebuild_git(libdovi)
-cleanup(libdovi install)
diff --git a/packages/libplacebo.cmake b/packages/libplacebo.cmake
index da8a017..b5797dc 100644
--- a/packages/libplacebo.cmake
+++ b/packages/libplacebo.cmake
@@ -8,7 +8,6 @@ ExternalProject_Add(libplacebo
         lcms2
         glad
         fast_float
-        libdovi
         xxhash
     GIT_REPOSITORY https://github.com/haasn/libplacebo.git
     SOURCE_DIR ${SOURCE_LOCATION}
-- 
2.48.1.windows.1

